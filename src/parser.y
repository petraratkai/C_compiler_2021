%code requires{
	#include "ast.hpp"
	#include <cassert>
	#include <string>

	extern Expression* g_root;
	extern FILE *yyin

	int yylex(void);
	void yyerror(const char *);
}

%union{
	Expression* expr;
	std::string* string;
}

%token T_AUTO T_BREAK T_CASE T_CHAR T_CONST T_CONTINUE T_DEFAULT T_DO T_DOUBLE T_ELSE T_ENUM T_EXTERN T_FLOAT T_FOR T_GOTO T_IF T_INT T_LONG T_REGISTER T_RETURN T_SHORT T_SIGNED T_SIZEOF T_STATIC T_STRUCT T_SWITCH T_TYPEDEF T_UNION T_UNSIGNED T_VOID T_VOLATILE T_WHILE
%token T_PLUS T_MINUS T_MULT T_DIVIDE T_MODULO T_INCREMENENT T_DECREMENT 
%token T_EQUAL T_UNEQUAL T_GREATER T_LESSER T_GREATEREQ T_LESSEREQ
%token T_AND T_OR T_NOT
%token T_BITAND T_BITOR T_BITXOR T_BITCOMP T_BITLSHIFT T_BITRSHIFT
%token T_ASSIGN T_PLUSASSIGN T_MINUSASSIGN T_MULTASSIGN T_DIVIDEASSIGN T_MODULOASSIGN T_LSHFTASSIGN T_RSHFTASSIGN T_ANDASSIGN T_XORASSIGN T_ORASSIGN
%token T_LCURLBRACKET T_RCURLBRACKET T_LSQUAREBRACKET T_RSQUAREBRACKET T_LBRACKET T_RBRACKET
%token T_ACCESS T_POINTERACCESS
%token T_SEMICOLON T_QUESTIONMARK T_COLON T_COMMA
%token IDENTIFIER INT_CONST FLOAT_CONST CHAR_CONST STRING_CONST


